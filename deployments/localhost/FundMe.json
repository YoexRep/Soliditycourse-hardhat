{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperwithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddresssToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4e865c32ef24f1803309faff0c24dfcc5e056ae3331f5305fb79671f49492100",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1123021",
    "logsBloom": "0x
    "blockHash": "0x7239c55571573fe7c0a04941e3db8c099ce040c54f2eee272557829688051495",
    "transactionHash": "0x4e865c32ef24f1803309faff0c24dfcc5e056ae3331f5305fb79671f49492100",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1123021",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "b086c6fe2201bf7722e6543ed14f4978",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperwithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddresssToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders; // s_ significa storage, para saber que memorias se guardar en storage, y cuales en memoria\\n\\n    address private i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    //Creo un priceFeed variable para poder pasarle el chainlink de la network que sea para probar. y poder leer el contrato\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        // ETH/USD price feed address of Goerli Network.\\n        /* AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );*/\\n        return s_priceFeed.version();\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length; // funders es un array almacenado en storage, por lo que gasta mucho gas\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    //Con esta funcion lo que haremos sera leer el el array del storage una vez, y luego pasarlo a memoria, para que gaste mucho menos.\\n\\n    function cheaperwithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //los tipos de datos mapping no pueden estar en memoria\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddresssToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x9de1139c6fd51b88f47a98e548e46e3c183ab6f7cbba6ca170d7b01fdaf68804\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x70b995bdf7d8df1297a1b975e2023f3720868feec08917d66cc90f7eb11103fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620013f5380380620013f583398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b611289806200016c6000396000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461011a5780639e87a5cd14610145578063b60d428814610170578063d7b4750c1461017a578063ee7d2452146101b757610099565b80630d8e6e2c146100a35780633ccfd60b146100ce57806367bf350b146100e55780636b69a592146100ef57610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100b861032e565b6040516100c59190610b4a565b60405180910390f35b3480156100da57600080fd5b506100e36103d5565b005b6100ed610617565b005b3480156100fb57600080fd5b506101046108bd565b6040516101119190610b4a565b60405180910390f35b34801561012657600080fd5b5061012f6108ca565b60405161013c9190610ba6565b60405180910390f35b34801561015157600080fd5b5061015a6108f4565b6040516101679190610c20565b60405180910390f35b6101786101f4565b005b34801561018657600080fd5b506101a1600480360381019061019c9190610c6c565b61091e565b6040516101ae9190610ba6565b60405180910390f35b3480156101c357600080fd5b506101de60048036038101906101d99190610cc5565b610966565b6040516101eb9190610b4a565b60405180910390f35b6802b5e3af16b1880000610233600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ae90919063ffffffff16565b1015610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b90610d4f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c29190610d9e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561039857600080fd5b505afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d09190610e09565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105075760006001828154811061048257610481610e36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104ff90610e65565b91505061045f565b50600067ffffffffffffffff81111561052357610522610eae565b5b6040519080825280602002602001820160405280156105515781602001602082028036833780820191505090505b5060019080519060200190610567929190610a8a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161058e90610f0e565b60006040518083038185875af1925050503d80600081146105cb576040519150601f19603f3d011682016040523d82523d6000602084013e6105d0565b606091505b5050905080610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060b90610f6f565b60405180910390fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d8575b5050505050905060005b81518110156107ac57600082828151811061074a57610749610e36565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a490610e65565b91505061072c565b50600067ffffffffffffffff8111156107c8576107c7610eae565b5b6040519080825280602002602001820160405280156107f65781602001602082028036833780820191505090505b506001908051906020019061080c929190610a8a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161083390610f0e565b60006040518083038185875af1925050503d8060008114610870576040519150601f19603f3d011682016040523d82523d6000602084013e610875565b606091505b50509050806108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090610f6f565b60405180910390fd5b5050565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001828154811061093457610933610e36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806109ba836109ea565b90506000670de0b6b3a764000085836109d39190610f8f565b6109dd9190611018565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a3357600080fd5b505afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906110c1565b5050509150506402540be40081610a82919061113c565b915050919050565b828054828255906000526020600020908101928215610b03579160200282015b82811115610b025782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aaa565b5b509050610b109190610b14565b5090565b5b80821115610b2d576000816000905550600101610b15565b5090565b6000819050919050565b610b4481610b31565b82525050565b6000602082019050610b5f6000830184610b3b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9082610b65565b9050919050565b610ba081610b85565b82525050565b6000602082019050610bbb6000830184610b97565b92915050565b6000819050919050565b6000610be6610be1610bdc84610b65565b610bc1565b610b65565b9050919050565b6000610bf882610bcb565b9050919050565b6000610c0a82610bed565b9050919050565b610c1a81610bff565b82525050565b6000602082019050610c356000830184610c11565b92915050565b600080fd5b610c4981610b31565b8114610c5457600080fd5b50565b600081359050610c6681610c40565b92915050565b600060208284031215610c8257610c81610c3b565b5b6000610c9084828501610c57565b91505092915050565b610ca281610b85565b8114610cad57600080fd5b50565b600081359050610cbf81610c99565b92915050565b600060208284031215610cdb57610cda610c3b565b5b6000610ce984828501610cb0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d39601b83610cf2565b9150610d4482610d03565b602082019050919050565b60006020820190508181036000830152610d6881610d2c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610da982610b31565b9150610db483610b31565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de957610de8610d6f565b5b828201905092915050565b600081519050610e0381610c40565b92915050565b600060208284031215610e1f57610e1e610c3b565b5b6000610e2d84828501610df4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e7082610b31565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ea357610ea2610d6f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ef8600083610edd565b9150610f0382610ee8565b600082019050919050565b6000610f1982610eeb565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f59600b83610cf2565b9150610f6482610f23565b602082019050919050565b60006020820190508181036000830152610f8881610f4c565b9050919050565b6000610f9a82610b31565b9150610fa583610b31565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fde57610fdd610d6f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061102382610b31565b915061102e83610b31565b92508261103e5761103d610fe9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106881611049565b811461107357600080fd5b50565b6000815190506110858161105f565b92915050565b6000819050919050565b61109e8161108b565b81146110a957600080fd5b50565b6000815190506110bb81611095565b92915050565b600080600080600060a086880312156110dd576110dc610c3b565b5b60006110eb88828901611076565b95505060206110fc888289016110ac565b945050604061110d88828901610df4565b935050606061111e88828901610df4565b925050608061112f88828901611076565b9150509295509295909350565b60006111478261108b565b91506111528361108b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561119157611190610d6f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111ce576111cd610d6f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561120b5761120a610d6f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561124857611247610d6f565b5b82820290509291505056fea2646970667358221220a9aa3c071fc872f80af1f4c065cb1b1baf5a5eeafa0b14186fbeaa7eb6ff878764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461011a5780639e87a5cd14610145578063b60d428814610170578063d7b4750c1461017a578063ee7d2452146101b757610099565b80630d8e6e2c146100a35780633ccfd60b146100ce57806367bf350b146100e55780636b69a592146100ef57610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100b861032e565b6040516100c59190610b4a565b60405180910390f35b3480156100da57600080fd5b506100e36103d5565b005b6100ed610617565b005b3480156100fb57600080fd5b506101046108bd565b6040516101119190610b4a565b60405180910390f35b34801561012657600080fd5b5061012f6108ca565b60405161013c9190610ba6565b60405180910390f35b34801561015157600080fd5b5061015a6108f4565b6040516101679190610c20565b60405180910390f35b6101786101f4565b005b34801561018657600080fd5b506101a1600480360381019061019c9190610c6c565b61091e565b6040516101ae9190610ba6565b60405180910390f35b3480156101c357600080fd5b506101de60048036038101906101d99190610cc5565b610966565b6040516101eb9190610b4a565b60405180910390f35b6802b5e3af16b1880000610233600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ae90919063ffffffff16565b1015610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b90610d4f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c29190610d9e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561039857600080fd5b505afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d09190610e09565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105075760006001828154811061048257610481610e36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104ff90610e65565b91505061045f565b50600067ffffffffffffffff81111561052357610522610eae565b5b6040519080825280602002602001820160405280156105515781602001602082028036833780820191505090505b5060019080519060200190610567929190610a8a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161058e90610f0e565b60006040518083038185875af1925050503d80600081146105cb576040519150601f19603f3d011682016040523d82523d6000602084013e6105d0565b606091505b5050905080610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060b90610f6f565b60405180910390fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d8575b5050505050905060005b81518110156107ac57600082828151811061074a57610749610e36565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a490610e65565b91505061072c565b50600067ffffffffffffffff8111156107c8576107c7610eae565b5b6040519080825280602002602001820160405280156107f65781602001602082028036833780820191505090505b506001908051906020019061080c929190610a8a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161083390610f0e565b60006040518083038185875af1925050503d8060008114610870576040519150601f19603f3d011682016040523d82523d6000602084013e610875565b606091505b50509050806108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090610f6f565b60405180910390fd5b5050565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001828154811061093457610933610e36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806109ba836109ea565b90506000670de0b6b3a764000085836109d39190610f8f565b6109dd9190611018565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a3357600080fd5b505afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906110c1565b5050509150506402540be40081610a82919061113c565b915050919050565b828054828255906000526020600020908101928215610b03579160200282015b82811115610b025782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aaa565b5b509050610b109190610b14565b5090565b5b80821115610b2d576000816000905550600101610b15565b5090565b6000819050919050565b610b4481610b31565b82525050565b6000602082019050610b5f6000830184610b3b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9082610b65565b9050919050565b610ba081610b85565b82525050565b6000602082019050610bbb6000830184610b97565b92915050565b6000819050919050565b6000610be6610be1610bdc84610b65565b610bc1565b610b65565b9050919050565b6000610bf882610bcb565b9050919050565b6000610c0a82610bed565b9050919050565b610c1a81610bff565b82525050565b6000602082019050610c356000830184610c11565b92915050565b600080fd5b610c4981610b31565b8114610c5457600080fd5b50565b600081359050610c6681610c40565b92915050565b600060208284031215610c8257610c81610c3b565b5b6000610c9084828501610c57565b91505092915050565b610ca281610b85565b8114610cad57600080fd5b50565b600081359050610cbf81610c99565b92915050565b600060208284031215610cdb57610cda610c3b565b5b6000610ce984828501610cb0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d39601b83610cf2565b9150610d4482610d03565b602082019050919050565b60006020820190508181036000830152610d6881610d2c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610da982610b31565b9150610db483610b31565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de957610de8610d6f565b5b828201905092915050565b600081519050610e0381610c40565b92915050565b600060208284031215610e1f57610e1e610c3b565b5b6000610e2d84828501610df4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e7082610b31565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ea357610ea2610d6f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ef8600083610edd565b9150610f0382610ee8565b600082019050919050565b6000610f1982610eeb565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f59600b83610cf2565b9150610f6482610f23565b602082019050919050565b60006020820190508181036000830152610f8881610f4c565b9050919050565b6000610f9a82610b31565b9150610fa583610b31565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fde57610fdd610d6f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061102382610b31565b915061102e83610b31565b92508261103e5761103d610fe9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106881611049565b811461107357600080fd5b50565b6000815190506110858161105f565b92915050565b6000819050919050565b61109e8161108b565b81146110a957600080fd5b50565b6000815190506110bb81611095565b92915050565b600080600080600060a086880312156110dd576110dc610c3b565b5b60006110eb88828901611076565b95505060206110fc888289016110ac565b945050604061110d88828901610df4565b935050606061111e88828901610df4565b925050608061112f88828901611076565b9150509295509295909350565b60006111478261108b565b91506111528361108b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561119157611190610d6f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111ce576111cd610d6f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561120b5761120a610d6f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561124857611247610d6f565b5b82820290509291505056fea2646970667358221220a9aa3c071fc872f80af1f4c065cb1b1baf5a5eeafa0b14186fbeaa7eb6ff878764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}